https://gitlab.torproject.org/tpo/core/tor/-/commit/ee38514cc4372bfb7d01ee96a1110d600a30e061

From ee38514cc4372bfb7d01ee96a1110d600a30e061 Mon Sep 17 00:00:00 2001
From: Sam James <sam@gentoo.org>
Date: Tue, 8 Nov 2022 06:42:59 +0000
Subject: [PATCH] build: fix -Wstrict-prototypes (Clang 16)

Clang 16 warns on -Wstrict-prototypes in preparation for C23 which can
among other things, lead to some configure tests silently failing/returning the wrong result.

Fixes this error:
```
-ignoreme: warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
+ignoreme: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
 main ()
```

For more information, see LWN.net [0] or LLVM's Discourse [1], gentoo-dev@ [2],
or the (new) c-std-porting mailing list [3].

[0] https://lwn.net/Articles/913505/
[1] https://discourse.llvm.org/t/configure-script-breakage-with-the-new-werror-implicit-function-declaration/65213
[2] https://archives.gentoo.org/gentoo-dev/message/dd9f2d3082b8b6f8dfbccb0639e6e240
[3] hosted at lists.linux.dev.

Bug: https://bugs.gentoo.org/879747
Signed-off-by: Sam James <sam@gentoo.org>
--- a/configure.ac
+++ b/configure.ac
@@ -1982,7 +1982,7 @@ AC_CACHE_CHECK([whether memset(0) sets pointers to NULL], tor_cv_null_is_zero,
 #ifdef HAVE_STDDEF_H
 #include <stddef.h>
 #endif
-int main () { char *p1,*p2; p1=NULL; memset(&p2,0,sizeof(p2));
+int main (void) { char *p1,*p2; p1=NULL; memset(&p2,0,sizeof(p2));
 return memcmp(&p1,&p2,sizeof(char*))?1:0; }]])],
        [tor_cv_null_is_zero=yes],
        [tor_cv_null_is_zero=no],
@@ -2006,7 +2006,7 @@ AC_CACHE_CHECK([whether memset(0) sets doubles to 0.0], tor_cv_dbl0_is_zero,
 #ifdef HAVE_STDDEF_H
 #include <stddef.h>
 #endif
-int main () { double d1,d2; d1=0; memset(&d2,0,sizeof(d2));
+int main (void) { double d1,d2; d1=0; memset(&d2,0,sizeof(d2));
 return memcmp(&d1,&d2,sizeof(d1))?1:0; }]])],
        [tor_cv_dbl0_is_zero=yes],
        [tor_cv_dbl0_is_zero=no],
@@ -2031,7 +2031,7 @@ AC_CACHE_CHECK([whether we can malloc(0) safely.], tor_cv_malloc_zero_works,
 #ifdef HAVE_STDDEF_H
 #include <stddef.h>
 #endif
-int main () { return malloc(0)?0:1; }]])],
+int main (void) { return malloc(0)?0:1; }]])],
        [tor_cv_malloc_zero_works=yes],
        [tor_cv_malloc_zero_works=no],
        [tor_cv_malloc_zero_works=cross])])
@@ -2049,7 +2049,7 @@ fi
 # whether we seem to be in a 2s-complement world.
 AC_CACHE_CHECK([whether we are using 2s-complement arithmetic], tor_cv_twos_complement,
 [AC_RUN_IFELSE([AC_LANG_SOURCE(
-[[int main () { int problem = ((-99) != (~99)+1);
+[[int main (void) { int problem = ((-99) != (~99)+1);
 return problem ? 1 : 0; }]])],
        [tor_cv_twos_complement=yes],
        [tor_cv_twos_complement=no],
@@ -2069,7 +2069,7 @@ fi
 # What does shifting a negative value do?
 AC_CACHE_CHECK([whether right-shift on negative values does sign-extension], tor_cv_sign_extend,
 [AC_RUN_IFELSE([AC_LANG_SOURCE(
-[[int main () { int okay = (-60 >> 8) == -1; return okay ? 0 : 1; }]])],
+[[int main (void) { int okay = (-60 >> 8) == -1; return okay ? 0 : 1; }]])],
        [tor_cv_sign_extend=yes],
        [tor_cv_sign_extend=no],
        [tor_cv_sign_extend=cross])])
GitLab
